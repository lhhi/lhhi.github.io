<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2024/08/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/08/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;cstdio&gt;</span><br><span class="hljs-comment">#include&lt;cstdlib&gt;</span><br><span class="hljs-comment">#include&lt;ctime&gt;</span><br><span class="hljs-comment">#define red 0</span><br><span class="hljs-comment">#define black 1 </span><br><span class="hljs-comment">#define dblack 2</span><br>using namespace std;<br>// red 0, black 1<br>struct Node&#123;<br>int key,color;<br>struct Node *lchild,*rchild; <br>&#125;; <br><br>Node __Nil;<br><span class="hljs-comment">#define Nil (&amp;__Nil)</span><br><br>void <span class="hljs-function"><span class="hljs-title">init</span></span>()&#123;<br>Nil-&gt;key=-1;<br>Nil-&gt;color=black;<br>Nil-&gt;lchild=Nil-&gt;rchild=Nil;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>Node *getnewnode(int key)&#123;<br>Node *p=new Node;<br>p-&gt;key=key;<br>p-&gt;color=red;<br>p-&gt;lchild=p-&gt;rchild=Nil;<br><span class="hljs-built_in">return</span> p;<br>&#125;<br><br>bool has_red_node(Node *root)&#123;<br><span class="hljs-built_in">return</span> root-&gt;lchild-&gt;color==red||root-&gt;rchild-&gt;color==red;<br>&#125;<br><br>Node *left_rotate(Node *root)&#123;<br>Node *new_node=root-&gt;rchild;<br>root-&gt;rchild=new_node-&gt;lchild;<br>new_node-&gt;lchild=root;<br><span class="hljs-built_in">return</span> new_node;<br>&#125;<br><br>Node *right_rotate(Node *root)&#123;<br>Node *new_node=root-&gt;lchild;<br>root-&gt;lchild=new_node-&gt;rchild;<br>new_node-&gt;rchild=root;<br><span class="hljs-built_in">return</span> new_node;<br>&#125;<br><br>Node *insert_maintain(Node *root)&#123;<br>int flag=0;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;color==red&amp;&amp;has_red_node(root-&gt;lchild)) flag=1;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;color==red&amp;&amp;has_red_node(root-&gt;rchild)) flag=2;<br><span class="hljs-keyword">if</span>(flag==0) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;color==red&amp;&amp;root-&gt;rchild-&gt;color==red) goto red_up_maintain;<br><span class="hljs-keyword">if</span>(flag==1)&#123;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;rchild-&gt;color==red)&#123;<br>root-&gt;lchild=left_rotate(root-&gt;lchild);<br>&#125;<br>root=right_rotate(root);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;lchild-&gt;color==red)&#123;<br>root-&gt;rchild=right_rotate(root-&gt;rchild);<br>&#125;<br>root=left_rotate(root);<br>&#125;<br>red_up_maintain:<br>root-&gt;color=red;<br>root-&gt;lchild-&gt;color=black;<br>root-&gt;rchild-&gt;color=black;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>Node *__insert(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> getnewnode(key);<br><span class="hljs-keyword">if</span>(root-&gt;key==key) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(key&lt;root-&gt;key) root-&gt;lchild=__insert(root-&gt;lchild,key);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;root-&gt;key) root-&gt;rchild=__insert(root-&gt;rchild,key);<br><span class="hljs-built_in">return</span> insert_maintain(root);<br>&#125;<br><br>Node *insert(Node *root,int key)&#123;<br>root=__insert(root,key);<br>root-&gt;color=black;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>void clear(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> ;<br>clear(root-&gt;lchild);<br>clear(root-&gt;rchild);<br>delete root;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void output(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> ;<br>output(root-&gt;lchild);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d(%d)[%d][%d]\n&quot;</span>,root-&gt;key,root-&gt;color,root-&gt;lchild-&gt;key,root-&gt;rchild-&gt;key);<br>output(root-&gt;rchild);<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>Node *erase_maintain(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;color!=dblack&amp;&amp;root-&gt;rchild-&gt;color!=dblack) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(has_red_node(root))&#123;<br>root-&gt;color=red;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;color==red)&#123;<br>root=left_rotate(root);<br>root-&gt;lchild=erase_maintain(root-&gt;lchild);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>root=right_rotate(root);<br>root-&gt;rchild=erase_maintain(root-&gt;rchild);<br>&#125;<br>root-&gt;color=black;<br><span class="hljs-built_in">return</span> root;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;color==dblack&amp;&amp;!has_red_node(root-&gt;lchild)||<br>root-&gt;lchild-&gt;color==dblack&amp;&amp;!has_red_node(root-&gt;rchild))&#123;<br>root-&gt;color+=1;<br>root-&gt;lchild-&gt;color-=1;<br>root-&gt;rchild-&gt;color-=1;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;color==dblack)&#123;<br>root-&gt;lchild-&gt;color=black;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;rchild-&gt;color!=red)&#123;<br>root-&gt;rchild=right_rotate(root-&gt;rchild);<br>&#125;<br>root-&gt;rchild-&gt;color=root-&gt;color;<br>root=left_rotate(root); <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>root-&gt;rchild-&gt;color=black;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;lchild-&gt;color!=red)&#123;<br>root-&gt;lchild=left_rotate(root-&gt;lchild);<br>&#125;<br>root-&gt;lchild-&gt;color=root-&gt;color;<br>root=right_rotate(root);<br>&#125;<br>root-&gt;lchild-&gt;color=root-&gt;rchild-&gt;color=black; <br><span class="hljs-built_in">return</span> root;<br>&#125;<br>&#125;<br><br>Node *pre_search(Node *root)&#123;<br>Node *temp=root-&gt;lchild;<br><span class="hljs-keyword">while</span>(temp-&gt;rchild!=Nil) temp=temp-&gt;rchild; <br><span class="hljs-built_in">return</span> temp;<br>&#125;<br><br>Node *__erase(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(key&lt;root-&gt;key) root-&gt;lchild=__erase(root-&gt;lchild,key);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;root-&gt;key) root-&gt;rchild=__erase(root-&gt;rchild,key);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(root-&gt;lchild==Nil||root-&gt;rchild==Nil)&#123;<br>Node *temp=root-&gt;lchild!=Nil?root-&gt;lchild:root-&gt;rchild;<br>temp-&gt;color+=root-&gt;color;<br>delete root;<br><span class="hljs-built_in">return</span> temp;<br>&#125;<br>Node *temp=pre_search(root);<br>root-&gt;key=temp-&gt;key;<br>root-&gt;lchild=__erase(root-&gt;lchild,temp-&gt;key);<br>&#125;<br><span class="hljs-built_in">return</span> erase_maintain(root);<br>&#125; <br><br>Node *erase(Node *root,int key)&#123;<br>root=__erase(root,key);<br>root-&gt;color=black;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>init();<br>srand(time(0));<br>Node *root=Nil;<br><span class="hljs-comment">#define MAX_N 10</span><br><span class="hljs-keyword">for</span>(int i=0;i&lt;MAX_N;i++)&#123;<br>int x=rand()%100;<br>root=insert(root,x);<br>output(root);<br>cout&lt;&lt;<span class="hljs-string">endl;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">int y;</span><br><span class="hljs-string">while(cin&gt;&gt;y)&#123;</span><br><span class="hljs-string">if(y==-1) break;</span><br><span class="hljs-string">root=erase(root,y);</span><br><span class="hljs-string">output(root);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">return 0;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;cstdlib&gt;</span><br><span class="hljs-comment">#include&lt;cstdio&gt;</span><br>using namespace std;<br>struct Node&#123;<br>int key,h;<br>struct Node *lchild,*rchild;<br>&#125;; <br><br>Node __Nil; <br><span class="hljs-comment">#define Nil (&amp;__Nil)</span><br>void <span class="hljs-function"><span class="hljs-title">init</span></span>()&#123;<br>Nil-&gt;h=0;<br>Nil-&gt;key=-1;<br>Nil-&gt;lchild=Nil-&gt;rchild=Nil;<br><span class="hljs-built_in">return</span> ; <br>&#125;<br><br>Node *getnewnode(int key)&#123;<br>Node *p=new Node;<br>p-&gt;key=key;<br>p-&gt;h=1;<br>p-&gt;lchild=p-&gt;rchild=Nil;<br><span class="hljs-built_in">return</span> p;<br>&#125;<br><br>void update_heigh(Node *root)&#123;<br>root-&gt;h=max(root-&gt;lchild-&gt;h,root-&gt;rchild-&gt;h)+1; <br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>Node *left_rotate(Node *root)&#123;<br>Node *temp=root-&gt;rchild;<br>root-&gt;rchild=temp-&gt;lchild;<br>temp-&gt;lchild=root;<br>update_heigh(root);<br>update_heigh(temp);<br><span class="hljs-built_in">return</span> temp;<br>&#125;<br><br>Node *right_rotate(Node *root)&#123;<br>Node *temp=root-&gt;lchild;<br>root-&gt;lchild=temp-&gt;rchild;<br>temp-&gt;rchild=root;<br>update_heigh(root);<br>update_heigh(temp);<br><span class="hljs-built_in">return</span> temp;<br>&#125;<br><br>Node *maintain(Node *root)&#123; <br><span class="hljs-keyword">if</span>(abs(root-&gt;lchild-&gt;h-root-&gt;rchild-&gt;h)&lt;=1) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;h&gt;root-&gt;rchild-&gt;h)&#123;<br><span class="hljs-keyword">if</span>(root-&gt;lchild-&gt;rchild-&gt;h&gt;root-&gt;lchild-&gt;lchild-&gt;h)&#123;<br>root-&gt;lchild=left_rotate(root-&gt;lchild);<br>&#125;<br>root=right_rotate(root);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(root-&gt;rchild-&gt;lchild-&gt;h&gt;root-&gt;rchild-&gt;rchild-&gt;h)&#123;<br>root-&gt;rchild=right_rotate(root-&gt;rchild);<br>&#125;<br>root=left_rotate(root);<br>&#125; <br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>Node *insert(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> getnewnode(key);<br><span class="hljs-keyword">if</span>(root-&gt;key==key) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(root-&gt;key&gt;key) root-&gt;lchild=insert(root-&gt;lchild,key);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;key&lt;key) root-&gt;rchild=insert(root-&gt;rchild,key);<br>update_heigh(root);<br><span class="hljs-built_in">return</span> maintain(root);<br>&#125;<br><br>Node *pre_search(Node *root)&#123;<br>Node *temp=root-&gt;lchild;<br><span class="hljs-keyword">while</span>(temp-&gt;rchild!=Nil) temp=temp-&gt;rchild;<br><span class="hljs-built_in">return</span> temp;<br>&#125;<br><br>Node *erase(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(root-&gt;key&lt;key) root-&gt;rchild=erase(root-&gt;rchild,key);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;key&gt;key) root-&gt;lchild=erase(root-&gt;lchild,key); <br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(root-&gt;lchild==Nil||root-&gt;rchild==Nil)&#123;<br>Node *temp=root-&gt;lchild!=Nil?root-&gt;lchild:root-&gt;rchild;<br>delete root;<br><span class="hljs-built_in">return</span> temp;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>Node *temp=pre_search(root);<br>root-&gt;key=temp-&gt;key; <br>root-&gt;lchild=erase(root-&gt;lchild,temp-&gt;key);<br>&#125;<br>&#125;<br>update_heigh(root);<br><span class="hljs-built_in">return</span> maintain(root);<br>&#125; <br><br>void clear(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> ;<br>clear(root-&gt;lchild);<br>clear(root-&gt;rchild);<br>delete root;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void output(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root==Nil) <span class="hljs-built_in">return</span> ;<br>output(root-&gt;lchild);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d[%d][%d]&quot;</span>,root-&gt;key,root-&gt;lchild-&gt;key,root-&gt;rchild-&gt;key);<br>output(root-&gt;rchild);<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>init();<br>Node *root=Nil;<br>int x;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;x)&#123;<br><span class="hljs-keyword">if</span>(x==-1) <span class="hljs-built_in">break</span>;<br>root=insert(root,x);<br>&#125;<br>output(root);<br>int y;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;y)&#123;<br><span class="hljs-keyword">if</span>(y==-1) <span class="hljs-built_in">break</span>;<br>root=erase(root,y);<br>output(root);<br>&#125;<br><span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;cstdlib&gt;</span><br><span class="hljs-comment">#include&lt;ctime&gt;</span><br><span class="hljs-comment">#include&lt;cstring&gt;</span><br>using namespace std;<br><span class="hljs-comment">#define MAX_M 3</span><br><span class="hljs-comment">#define Lchild(root,pos) (root-&gt;next[pos])</span><br><span class="hljs-comment">#define Rchild(root,pos) (root-&gt;next[pos+1])</span><br>struct Node&#123;<br>int n,key[MAX_M+1];<br>struct Node *next[MAX_M+1];<br>&#125;; <br><br>Node *<span class="hljs-function"><span class="hljs-title">getnewnode</span></span>()&#123;<br>Node *p=new Node;<br>p-&gt;n=0; <br>memset(p-&gt;next,0,sizeof(Node *)*(MAX_M+1));<br><span class="hljs-built_in">return</span> p;<br>&#125;<br><br>Node *insert_key(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==NULL) &#123;<br>root=getnewnode();<br>root-&gt;key[(root-&gt;n)++]=key;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br>int pos=0;<br><span class="hljs-keyword">while</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]&lt;key) pos+=1;<br><span class="hljs-keyword">if</span>(root-&gt;key[pos]==key) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">for</span>(int i=root-&gt;n-1;i&gt;=pos;i--) root-&gt;key[i+1]=root-&gt;key[i]; <br>root-&gt;key[pos]=key;<br>root-&gt;n+=1;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>Node *insert_maintain(Node *root,Node *child,int pos)&#123;<br><span class="hljs-keyword">if</span>(child-&gt;n&lt;MAX_M) <span class="hljs-built_in">return</span> root;<br>int spos=(child-&gt;n)/2;<br>Node *node1=getnewnode();<br>Node *node2=getnewnode();<br>node1-&gt;n=spos;<br>node2-&gt;n=child-&gt;n-1-spos;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;spos;i++)&#123;<br>node1-&gt;key[i]=child-&gt;key[i];<br>node1-&gt;next[i]=child-&gt;next[i];<br>&#125;<br>node1-&gt;next[spos]=child-&gt;next[spos];<br><span class="hljs-keyword">for</span>(int i=0;i&lt;node2-&gt;n;i++)&#123;<br>node2-&gt;key[i]=child-&gt;key[i+spos+1];<br>node2-&gt;next[i]=child-&gt;next[i+spos+1];<br>&#125;<br>node2-&gt;next[node2-&gt;n]=child-&gt;next[child-&gt;n];<br><span class="hljs-keyword">for</span>(int i=root-&gt;n;i&gt;=pos;i--)&#123;<br>root-&gt;key[i+1]=root-&gt;key[i];<br>root-&gt;next[i+1]=root-&gt;next[i];<br>&#125;<br>root-&gt;key[pos]=child-&gt;key[spos];<br>root-&gt;next[pos]=node1;<br>root-&gt;next[pos+1]=node2;<br>root-&gt;n+=1;<br>delete child;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>Node *__insert(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==NULL||root-&gt;next[0]==NULL) <span class="hljs-built_in">return</span> insert_key(root,key);<br>int pos=0;<br><span class="hljs-keyword">while</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]&lt;key) pos+=1;<br><span class="hljs-keyword">if</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]==key) <span class="hljs-built_in">return</span> root;<br>__insert(root-&gt;next[pos],key);<br><span class="hljs-built_in">return</span> insert_maintain(root,root-&gt;next[pos],pos);<br>&#125;<br><br>Node *insert(Node *root,int key)&#123;<br>root=__insert(root,key);<br><span class="hljs-keyword">if</span>(root-&gt;n==MAX_M)&#123;<br>Node *temp=getnewnode();<br>temp-&gt;next[0]=root;<br>root=insert_maintain(temp,root,0);<br>&#125;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>void clear(Node *root)&#123;<br><span class="hljs-keyword">if</span>(root==NULL) <span class="hljs-built_in">return</span> ;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;=root-&gt;n;i++) clear(root-&gt;next[i]);<br>delete root;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void print_node(Node *root) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d : &quot;</span>, root-&gt;n);<br>    <span class="hljs-keyword">for</span> (int i = 0; i &lt; root-&gt;n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, root-&gt;key[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; | &quot;</span>);<br>    <span class="hljs-keyword">if</span> (root-&gt;next[0] == NULL) goto output_end;<br>    <span class="hljs-keyword">for</span> (int i = 0; i &lt;= root-&gt;n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%4d&quot;</span>, root-&gt;next[i]-&gt;key[0]);<br>    &#125;<br>output_end:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void output(Node *root) &#123;<br>    <span class="hljs-keyword">if</span> (root == NULL) <span class="hljs-built_in">return</span> ;<br>    print_node(root);<br>    <span class="hljs-keyword">for</span> (int i = 0; i &lt;= root-&gt;n; i++) &#123;<br>        output(root-&gt;next[i]);<br>    &#125;<br>    <span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void erase_key(Node *root,int pos)&#123;<br><span class="hljs-keyword">for</span>(int i=pos+1;i&lt;root-&gt;n;i++) &#123;<br>root-&gt;key[i-1]=root-&gt;key[i];<br>&#125;<br>root-&gt;n-=1;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void right_rotate(Node *root,int pos)&#123;<br><span class="hljs-keyword">for</span>(int i=Rchild(root,pos)-&gt;n+1;i&gt;=0;i--)&#123;<br>Rchild(root,pos)-&gt;key[i+1]=Rchild(root,pos)-&gt;key[i]; <br>Rchild(root,pos)-&gt;next[i+1]=Rchild(root,pos)-&gt;next[i];<br>&#125;<br>Rchild(root,pos)-&gt;key[0]=root-&gt;key[pos];<br>Rchild(root,pos)-&gt;next[0]=Lchild(root,pos)-&gt;next[Lchild(root,pos)-&gt;n];<br>root-&gt;key[pos]=Lchild(root,pos)-&gt;key[Lchild(root,pos)-&gt;n-1];<br>Lchild(root,pos)-&gt;next[Lchild(root,pos)-&gt;n]=NULL;<br>Lchild(root,pos)-&gt;n-=1;<br>Rchild(root,pos)-&gt;n+=1;<br><span class="hljs-built_in">return</span> ; <br>&#125;<br><br>void left_rotate(Node *root,int pos)&#123;<br>Lchild(root,pos)-&gt;key[Lchild(root,pos)-&gt;n]=root-&gt;key[pos];<br>Lchild(root,pos)-&gt;next[Lchild(root,pos)-&gt;n+1]=Rchild(root,pos)-&gt;next[0];<br>Lchild(root,pos)-&gt;n+=1;<br>root-&gt;key[pos]=Rchild(root,pos)-&gt;key[0];<br><span class="hljs-keyword">for</span>(int i=0;i&lt;Rchild(root,pos)-&gt;n;i++)&#123;<br>Rchild(root,pos)-&gt;key[i]=Rchild(root,pos)-&gt;key[i+1];<br>Rchild(root,pos)-&gt;next[i]=Rchild(root,pos)-&gt;next[i+1]; <br>&#125;<br>Rchild(root,pos)-&gt;next[Rchild(root,pos)-&gt;n]=NULL;<br>Rchild(root,pos)-&gt;n-=1;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void merge_node(Node *root,int pos)&#123;<br>Node *node1=getnewnode();<br><span class="hljs-keyword">for</span>(int i=0;i&lt;=Lchild(root,pos)-&gt;n;i++)&#123;<br>node1-&gt;key[i]=Lchild(root,pos)-&gt;key[i];<br>node1-&gt;next[i]=Lchild(root,pos)-&gt;next[i];<br>&#125;<br>node1-&gt;n=Lchild(root,pos)-&gt;n+1;<br>node1-&gt;key[node1-&gt;n-1]=root-&gt;key[pos];<br><span class="hljs-keyword">for</span>(int i=0;i&lt;=Rchild(root,pos)-&gt;n;i++)&#123;<br>node1-&gt;key[i+node1-&gt;n]=Rchild(root,pos)-&gt;key[i];<br>node1-&gt;next[i+node1-&gt;n]=Rchild(root,pos)-&gt;next[i];<br>&#125;<br>node1-&gt;n+=Rchild(root,pos)-&gt;n;<br><span class="hljs-keyword">for</span>(int i=pos+1;i&lt;=root-&gt;n;i++)&#123;<br>root-&gt;key[i-1]=root-&gt;key[i];<br>root-&gt;next[i-1]=root-&gt;next[i];<br>&#125;<br>root-&gt;next[pos]=node1;<br>root-&gt;n-=1;<br><span class="hljs-built_in">return</span> ; <br>&#125;<br><br>Node *erase_maintain(Node *root,int pos)&#123;<br>int lower_bound=(MAX_M+1)/2-1;<br><span class="hljs-keyword">if</span>(root-&gt;next[pos]-&gt;n&gt;=lower_bound) <span class="hljs-built_in">return</span> root;<br><span class="hljs-keyword">if</span>(pos&gt;0&amp;&amp;root-&gt;next[pos-1]-&gt;n&gt;lower_bound)&#123;<br>right_rotate(root,pos-1);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;next[pos+1]-&gt;n&gt;lower_bound)&#123;<br>left_rotate(root,pos);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(pos&gt;0) merge_node(root,pos-1);<br><span class="hljs-keyword">else</span> merge_node(root,pos);//merge j,j+1;<br>&#125;<br><span class="hljs-built_in">return</span> root;<br>&#125;<br><br>Node *__erase(Node *root,int key)&#123;<br><span class="hljs-keyword">if</span>(root==NULL) <span class="hljs-built_in">return</span> root;<br>int pos=0; <br><span class="hljs-keyword">while</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]&lt;key) pos+=1;<br><span class="hljs-keyword">if</span>(root-&gt;next[0]==NULL)&#123;<br><span class="hljs-keyword">if</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]==key) erase_key(root,pos);<br><span class="hljs-built_in">return</span> root;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(pos&lt;root-&gt;n&amp;&amp;root-&gt;key[pos]==key)&#123;<br>Node *temp=root-&gt;next[pos];<br><span class="hljs-keyword">while</span>(temp-&gt;next[temp-&gt;n]) temp=temp-&gt;next[temp-&gt;n];<br>swap(root-&gt;key[pos],temp-&gt;key[temp-&gt;n-1]);<br>&#125;<br>root-&gt;next[pos]=__erase(root-&gt;next[pos],key);<br>&#125;<br><span class="hljs-built_in">return</span> erase_maintain(root,pos);<br>&#125;<br><br>Node *erase(Node *root,int key)&#123;<br>root=__erase(root,key);<br><span class="hljs-keyword">if</span>(root-&gt;n==0)&#123;<br>Node *temp=root-&gt;next[0];<br>delete root;<br>root=temp;<br>&#125;<br><span class="hljs-built_in">return</span> root;<br>&#125; <br><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>srand(time(0));<br>Node *root = NULL;<br><span class="hljs-comment">#define MAX_OP 12</span><br>    <span class="hljs-keyword">for</span> (int i = 0; i &lt; MAX_OP; i++) &#123;<br>        int val = rand() % 100;<br>        root = insert(root, val);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ninsert %d to BTree : \n&quot;</span>, val);<br>        output(root);<br>    &#125;<br>    int x;<br>    <span class="hljs-keyword">while</span> (~scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;erase %d from BTree : \n&quot;</span>, x);<br>        root = erase(root, x);<br>        output(root);<br>    &#125;<br><span class="hljs-built_in">return</span> 0; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;vector&gt;</span><br>using namespace std;<br>class BigInt:public vector&lt;int&gt;&#123;<br>public:<br>BigInt(int x)&#123;<br>this-&gt;push_back(x);<br>process_digit();<br>&#125;<br>void operator+=(int x)&#123;<br>at(0)+=x;<br>process_digit();<br><span class="hljs-built_in">return</span> ; <br>&#125;<br>BigInt operator+(int x)&#123;<br>BigInt ret(*this);<br>ret+=x;<br><span class="hljs-built_in">return</span> ret;<br>&#125;<br>void operator-=(int x)&#123;<br>int y=0;<br><span class="hljs-keyword">for</span>(int i=size()-1;i&gt;=0;i--)&#123;<br><br>&#125;<br>&#125; <br>void operator*=(int x)&#123;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;size();i++) at(i)*=x;<br>process_digit();<br><span class="hljs-built_in">return</span> ;<br>&#125;<br>BigInt operator*(int x)&#123;<br>BigInt ret(*this);<br>ret*=x;<br><span class="hljs-built_in">return</span> ret;<br>&#125;<br>void operator/=(int x)&#123;<br>int y=0;<br><span class="hljs-keyword">for</span>(int i=size()-1;i&gt;=0;i--)&#123;<br>y=y*10+at(i);<br>at(i)=y/x;<br>y%=x;<br>&#125;<br>process_digit();<br><span class="hljs-built_in">return</span> ;<br>&#125;<br>BigInt operator/(int x)&#123;<br>BigInt ret(*this);<br>ret/=x;<br><span class="hljs-built_in">return</span> ret;<br>&#125;<br>void <span class="hljs-function"><span class="hljs-title">process_digit</span></span>()&#123;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;this-&gt;size();i++)&#123;<br><span class="hljs-keyword">if</span>(at(i)&lt;10) <span class="hljs-built_in">continue</span>;<br><span class="hljs-keyword">if</span>(i+1==size()) push_back(0);<br>at(i+1)+=at(i)/10;<br>at(i)%=10;<br>&#125;<br><span class="hljs-keyword">while</span>(size()&gt;1&amp;&amp;at(size()-1)==0) pop_back();<br><span class="hljs-built_in">return</span> ;<br>&#125;<br>&#125;;<br><br>ostream&amp; operator&lt;&lt;(ostream &amp;out,const BigInt &amp;a)&#123;<br><span class="hljs-keyword">for</span>(int i=a.size()-1;i&gt;=0;i--) out&lt;&lt;<span class="hljs-string">a[i];</span><br><span class="hljs-string">return out;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;iostream&gt;</span><br><span class="hljs-comment">#define BASE 26</span><br><span class="hljs-comment">#include&lt;queue&gt;</span><br><span class="hljs-comment">#include&lt;cstring&gt;</span><br>using namespace std;<br>struct node&#123;<br>int flag;<br>node *next[26];<br>node *fail;<br>const char *s;<br>&#125;;<br><br>node *<span class="hljs-function"><span class="hljs-title">getnewnode</span></span>()&#123;<br>node *p=new node;<br>p-&gt;flag=0;<br>p-&gt;fail=NULL;<br>p-&gt;s=NULL;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;BASE;i++) p-&gt;next[i]=NULL;<br><span class="hljs-built_in">return</span> p;<br>&#125;<br><br>void insert(node *root,const char *s)&#123;<br>node *p=root;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;BASE;i++)&#123;<br>int ind=s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span>(p-&gt;next[ind]==NULL) p-&gt;next[ind]=getnewnode();<br>p=p-&gt;next[ind]; <br>&#125;<br>p-&gt;s=strdup(s);<br>p-&gt;flag=1;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void build_ac(node *root)&#123;<br>queue&lt;node *&gt; q;<br>q.push(root);<br><span class="hljs-keyword">for</span>(int i=0;i&lt;BASE;i++)&#123;<br><span class="hljs-keyword">if</span>(root-&gt;next[i]==NULL) <span class="hljs-built_in">continue</span>;<br>root-&gt;next[i]-&gt;fail=root;<br>q.push(root-&gt;next[i]);<br>&#125;<br><span class="hljs-keyword">while</span>(!q.empty())&#123;<br>node *cur=q.front(),*p;<br>q.pop();<br><span class="hljs-keyword">for</span>(int i=0;i&lt;BASE;i++)&#123;<br><span class="hljs-keyword">if</span>(cur-&gt;next[i]==NULL) <span class="hljs-built_in">continue</span>;<br>p=cur-&gt;fail;<br><span class="hljs-keyword">while</span>(p&amp;&amp;p-&gt;next[i]==NULL) p=p-&gt;fail;<br><span class="hljs-keyword">if</span>(p==NULL) p=root;<br><span class="hljs-keyword">else</span> p=p-&gt;next[i];<br>cur-&gt;next[i]-&gt;fail=p;<br>q.push(cur-&gt;next[i]);<br>&#125;<br>&#125;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br><br>void find(node *root,const char *s)&#123;<br>node *p=root,*q;<br><span class="hljs-keyword">for</span>(int i=0;s[i];i++)&#123;<br>int ind=s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">while</span>(p&amp;&amp;p-&gt;next[ind]==NULL) p=p-&gt;fail;<br><span class="hljs-keyword">if</span>(p==NULL) p=root;<br><span class="hljs-keyword">else</span> p=p-&gt;next[ind];<br>q=p;<br><span class="hljs-keyword">while</span>(q)&#123;<br><span class="hljs-keyword">if</span>(q-&gt;flag) cout&lt;&lt;<span class="hljs-string">q-&gt;s;</span><br><span class="hljs-string">q</span>=q-&gt;fail; <br>&#125;<br>&#125;<br>&#125;<br><br>void clear(node *root)&#123;<br><span class="hljs-keyword">if</span>(root==NULL) <span class="hljs-built_in">return</span> ;<br><span class="hljs-keyword">for</span>(int i=0;i&lt;BASE;i++) &#123;<br><span class="hljs-keyword">if</span>(root-&gt;next[i]==NULL) <span class="hljs-built_in">continue</span>;<br>clear(root-&gt;next[i]);<br>&#125;<br>delete root;<br><span class="hljs-built_in">return</span> ;<br>&#125;<br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()&#123;<br>int n;<br>char s[100];<br>cin&gt;&gt;n;<br>node *root=getnewnode();<br><span class="hljs-keyword">for</span>(int i=0;i&lt;n;i++)&#123;<br>cin&gt;&gt;s;<br>insert(root,s);<br>&#125;<br><br>build_ac(root);<br>char s1[50];<br>cin&gt;&gt;s1;<br>find(root,s);<br><span class="hljs-built_in">return</span> 0;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从0到1编写一个文本编辑器</title>
    <link href="/2024/08/27/%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2024/08/27/%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>本文的代码环境为linux，这是因为我们的文本编辑器使用<code>termios.h</code>头文件，这方便我们在底层与终端进行交互。但该头文件在Windows环境下不可用。所以我们需要使用Bash on Windows。</p><h2 id="关于Bash-on-Windows"><a href="#关于Bash-on-Windows" class="headerlink" title="关于Bash on Windows"></a>关于Bash on Windows</h2><p><strong>Bash on Windows</strong> 是 Microsoft 在 Windows 10 和 Windows 11 中引入的一个功能，现在更广泛地被称为 **Windows Subsystem for Linux (WSL)**。WSL 允许你在 Windows 操作系统上运行 Linux 环境，而无需修改代码或运行传统的虚拟机。</p><p>通过 WSL，你可以在 Windows 上直接运行 Linux 命令行工具、实用程序和应用程序，就像它们在 Linux 发行版上运行一样。这意味着你可以使用 <code>bash</code>、<code>zsh</code>、<code>vim</code>、<code>git</code>、<code>python</code>、<code>node.js</code> 等工具，以及需要 Linux 特定功能的软件，如那些依赖于 <code>&lt;termios.h&gt;</code> 的程序。更详细的了解和安装请参考<a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">官方文档</a>。</p><h2 id="安装viscode编辑器并配置代码环境"><a href="#安装viscode编辑器并配置代码环境" class="headerlink" title="安装viscode编辑器并配置代码环境"></a>安装viscode编辑器并配置代码环境</h2><h3 id="安装viscode"><a href="#安装viscode" class="headerlink" title="安装viscode"></a>安装viscode</h3><p>进入<a href="https://code.visualstudio.com/">viscode官网</a>，C盘空间够的话，所有步骤点击下一步即可。</p><h2 id="配置环境-1"><a href="#配置环境-1" class="headerlink" title="配置环境"></a>配置环境</h2><p>本文代码全部由C语言编写，所以我们要在viscode使用C语言和WLS环境，相关步骤<a href="https://code.visualstudio.com/docs/cpp/config-wsl">官网文档</a>写的很详细。</p><h1 id="The-main-function"><a href="#The-main-function" class="headerlink" title="The main() function"></a>The main() function</h1><p>首先让我们创建一个名为kilo.c的函数，打开你下载的Ubuntu，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> kilo<br></code></pre></td></tr></table></figure><p>输入<code>code</code>，vscode会自动打开。然后，我们可以在viscode中编辑我们的代码了。</p><p>我们在kilo.c中创建一个main()函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    reuturn <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C语言的main()函数比较特别，他是程序的默认起点。当程序main()函数返回时，程序会退出并将返回值传递给操作系统。返回值为0代表程序运行成功。</p><p>C是编译型语言，这意味着我们需要通过C编译器运行我们的程序并将他变成可执行文件，然后我们可以在命令行中运行我们的可执行文件了。</p><p>为了编译<code>kilo.c</code>，我们需要在命令行中输入<code>cc kilo.c -o kilo</code>，不出错的话，你将会得到一个名叫<code>kilo</code>的可执行文件，<code>cc</code>代表C编译器，<code>-o</code>表示将输出文件命名为<code>kilo</code>。该命令让编译器编译kilo.c，并生成一个名字为<code>kilo</code>的可执行文件。</p><p>要运行这个可执行文件，使用<code>./kilo</code>命令。但该程序目前没有如何输出，但你可以使用<code>echo $?</code>命令来检查程序的退出状态，不出意外的话，你会看到0被打印出来。</p><h1 id="使用make编译"><a href="#使用make编译" class="headerlink" title="使用make编译"></a>使用make编译</h1><p>每次编译都要执行<code>cc kilo.c -o kilo</code>命令可能会让你厌烦，make程序允许你使用<code>make</code>命令去编译C程序。你只需要提供一个<code>Makefile</code>来告诉他如何编译程序。</p><p>创建一个叫Makefile的文件，在其中输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">kilo: kilo.c<br>$(CC) kilo.c -o kilo -Wall -Wextra -pedantic -std=c99<br></code></pre></td></tr></table></figure><p>第一行表示<code>kilo</code>是我们想要构建的目标，而<code>kilo.c</code>是构建它所需要的文件。第二行指定了实际运行以从<code>kilo.c</code>构建<code>kilo</code>的命令。请确保第二行使用实际的制表符（Tab）进行缩进，而不是空格。你可以按照自己的喜好来缩进C文件，但是Makefile必须使用制表符。</p><p>这是因为在Makefile的语法中，制表符用于区分命令行的开始，而空格则被视为命令的一部分。如果Makefile中的规则（即依赖关系后的行）不以制表符开头，<code>make</code>程序将不会将这些行识别为命令，并可能会报错或无法正确执行。</p><p>因此，在编写Makefile时，请确保使用制表符而不是空格来缩进那些包含命令的行。这是Makefile语法的一个重要方面，也是初学者常犯的错误之一。想要更详细的了解Makefile，我推荐这篇<a href="https://seisman.github.io/how-to-write-makefile/overview.html#id2">博客</a>。</p><h1 id="使用记事本编辑代码"><a href="#使用记事本编辑代码" class="headerlink" title="使用记事本编辑代码"></a>使用记事本编辑代码</h1><p>看到这，聪明的你肯定发现了我们的viscode除了编辑代码和保存以外没有其他作用。我们使用<code>make</code>命令来编译我们的代码，使用<code>./kilo</code>来执行我们的可执行文件，该过程不需要viscode来编译运行。他在这只充当文本编辑的作用。所以我们可以用记事本来编辑我们的源码，使用上述命令编译执行即可。</p><h1 id="进入-raw-mode"><a href="#进入-raw-mode" class="headerlink" title="进入 raw mode"></a>进入 raw mode</h1><p>首先，让我们尝试读取用户的按键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>  char c;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">read</span>(STDIN_FILENO, &amp;c, 1) == 1);<br>  <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>read()</code> 函数和 <code>STDIN_FILENO</code> 宏都来自 <code>&lt;unistd.h&gt;</code> 头文件。我们要求 <code>read()</code> 函数从标准输入（通常是键盘）读取1个字节到变量 <code>c</code> 中，并持续这样做，直到没有更多的字节可以读取。<code>read()</code> 函数返回它读取的字节数，当到达文件末尾时返回0。</p><p>当你运行 <code>./kilo</code>（假设这是一个文本编辑器或类似程序），你的终端会连接到标准输入，因此你的键盘输入会被读取到变量 <code>c</code> 中。然而，默认情况下，你的终端处于规范模式（也称为熟模式）。在这种模式下，键盘输入只有在用户按下回车键时才会被发送到你的程序。这对于许多程序来说是有用的：它允许用户输入一行文本，使用退格键来修正错误，直到他们得到完全按照自己意愿的输入，然后按下回车键将其发送到程序。但是，对于具有更复杂用户界面的程序（如文本编辑器），这种模式并不适用。我们希望每个按键被按下时就能立即处理，以便我们可以立即响应。</p><p>我们想要的是原始模式（raw mode）。不幸的是，没有简单的开关可以直接将终端设置为原始模式。原始模式是通过关闭终端中的许多标志来实现的，我们将在本章中逐步完成这一操作。</p><p>要退出上述程序，你可以按下 Ctrl-D 来告诉 <code>read()</code> 函数它已经到达文件末尾。或者，你也可以随时按下 Ctrl-C 来立即终止进程。</p><h1 id="按下q退出"><a href="#按下q退出" class="headerlink" title="按下q退出"></a>按下q退出</h1><p>为了演示终端的规范模式是如何工作的，我们设置用户按下q时退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>  char c;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">read</span>(STDIN_FILENO, &amp;c, 1) == 1 &amp;&amp; c != <span class="hljs-string">&#x27;q&#x27;</span>);<br>  <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了退出这个程序，你需要输入一行文本，其中包含字母 ‘q’，然后按下回车键。程序会逐字符地快速读取这行文本，直到它读取到 ‘q’ 为止。此时，<code>while</code> 循环将停止，程序将退出。在 ‘q’ 之后的任何字符都将留在输入队列中未被读取，你可能会看到这些字符在你的程序退出后被送入到你的 shell 中。</p><p>这是因为在规范模式下（也称为熟模式），终端会将用户输入的文本视为一个整体，直到遇到换行符（即回车键被按下）才会将其发送给程序。程序会逐字符地处理这个输入流，但一旦遇到 ‘q’，它就会停止处理并退出，而不会继续读取 ‘q’ 之后的字符。然而，由于这些字符已经被输入到终端的输入缓冲区中，当程序退出后，它们仍然存在于那里，因此可能会被下一个接收输入的程序（如你的 shell）读取并处理。</p><p>为了避免这种情况，你可以在程序退出前清空输入缓冲区，但这通常不是必需的，因为大多数 shell 和程序都能够很好地处理这种情况。然而，在处理复杂输入或需要精确控制输入行为的程序中，清空输入缓冲区可能是一个好主意。</p><h1 id="关闭回显"><a href="#关闭回显" class="headerlink" title="关闭回显"></a>关闭回显</h1><p>终端回显（Terminal Echo）是指在用户通过终端（如命令行界面）输入字符时，这些字符会立即在屏幕上显示出来的行为。这是一种常见的用户交互方式，让用户能够看到他们正在输入的内容。例如，当你在终端中键入命令或文本时，你输入的每个字符都会立即出现在屏幕上，这就是回显的作用。但目前请让我们先关闭它。我们可以通过以下方式设置终端的属性：（1）使用 <code>tcgetattr()</code> 函数将当前属性读取到一个结构体中，（2）手动修改这个结构体，（3）将修改后的结构体传递给 <code>tcsetattr()</code> 函数，以将新的终端属性写回。现在，让我们尝试以这种方式关闭 <code>ECHO</code> 功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;termios.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br>void <span class="hljs-function"><span class="hljs-title">enableRawMode</span></span>() &#123;<br>  struct termios raw;<br>  tcgetattr(STDIN_FILENO, &amp;raw);<br>  raw.c_lflag &amp;= ~(ECHO);<br>  tcsetattr(STDIN_FILENO, TCSAFLUSH, &amp;raw);<br>&#125;<br>int <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br>  enableRawMode();<br>  char c;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">read</span>(STDIN_FILENO, &amp;c, 1) == 1 &amp;&amp; c != <span class="hljs-string">&#x27;q&#x27;</span>);<br>  <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>struct termios</code>、<code>tcgetattr()</code>、<code>tcsetattr()</code>、<code>ECHO</code> 和 <code>TCSAFLUSH</code> 都来自于 <code>&lt;termios.h&gt;</code> 头文件，它们与终端（terminal）的设置和操作紧密相关。</p><ul><li><code>ECHO</code> 功能使得你输入的每个键都被打印到终端上，这样你就可以看到你正在输入什么。这在规范模式下很有用，但在我们试图在原始模式下仔细渲染用户界面时，它就会碍事。因此，我们需要关闭它。这个程序做了与之前步骤中相同的事情，只是它不会打印你正在输入的内容。如果你曾经在终端中输入密码（例如使用 <code>sudo</code> 命令时），你可能对这种模式很熟悉。</li><li>程序退出后，根据你的 shell 类型，你可能会发现你的终端仍然不会回显你输入的内容。不用担心，它仍然会监听你的输入。只需按下 Ctrl-C 开始向你的 shell 输入新的一行，然后输入 <code>reset</code> 并按下回车键。这通常可以将你的终端重置回正常状态。如果这不起作用，你可以总是重启你的终端模拟器。我们将在下一步中解决这个问题。</li><li>终端属性可以通过 <code>tcgetattr()</code> 读取到一个 <code>termios</code> 结构中。在修改这些属性后，你可以使用 <code>tcsetattr()</code> 将它们应用到终端上。<code>TCSAFLUSH</code> 参数指定了何时应用更改：在这种情况下，它会等待所有挂起的输出被写入终端，并丢弃任何尚未读取的输入。</li><li><code>c_lflag</code> 字段用于“本地标志”（local flags）。macOS 的 <code>&lt;termios.h&gt;</code> 中的注释将其描述为“其他状态的倾倒场”（dumping ground for other state），因此可以将其视为“杂项标志”。其他标志字段包括 <code>c_iflag</code>（输入标志）、<code>c_oflag</code>（输出标志）和 <code>c_cflag</code>（控制标志），我们都需要修改它们以启用原始模式。</li><li><code>ECHO</code> 是一个位标志（bitflag），其二进制表示为 <code>00000000000000000000000000001000</code>。我们使用位非（bitwise-NOT）操作符（<code>~</code>）对这个值进行操作，得到 <code>11111111111111111111111111110111</code>。然后我们将这个结果与标志字段进行位与（bitwise-AND）操作，这会将标志字段中的第四位强制设置为 0，同时保持其他所有位的当前值。在 C 语言中，像这样翻转位是很常见的操作。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用hexo和github搭建自己的博客</title>
    <link href="/2024/08/27/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/08/27/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>然后，简单介绍一下利用 GitHub + Hexo 搭建的原理。</p><p>GitHub 是有名的代码托管网站，而它提供了一项服务 GitHub Pages，这个 GitHub Pages 可以将我们托管在 GitHub 上的一个仓库中的 html、css 和 js 代码渲染成静态页面。当然，这个仓库是特殊的，所以每一个 GitHub 账户只能够育一个这样的仓库。将相应的博客内容上传到 GitHub 上之后，我们就可以通过 <code>https://www.username.github.io</code> 来访问自己的博客，这里的 <code>username</code> 要换成自己的用户名。比如，我的用户名是 <code>lhhi</code>，那么就可以通过 <code>https://www.lhhi.github.io</code> 来访问我的博客。</p><p>Hexo 是使用 nodejs 开发的一个快速、简洁、高效的静态博客生成器。Hexo 使用 Markdown 语法解析文章，然后渲染成相应的网页，然后我们将渲染好的网页代码上传到 GitHub 上就可以了。简单来讲，利用 Hexo，我们只需要使用 Markdown 语法写文章，剩下的事情全部交给 Hexo 去做，我们就可以看到想要的博客效果了。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>注意, 下面的所有操作最好在科学上网的环境下完成。</p><h2 id="注册一个github账号"><a href="#注册一个github账号" class="headerlink" title="注册一个github账号"></a>注册一个github账号</h2><p>前往<a href="https://github.com/">github</a>官网，注册一个账号  </p><h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><p>进入 <a href="https://node.js.org/">node</a> 官网下载</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016163651.png"></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>进入<a href="https://git-scm.com/">git官网</a>下载</p><h1 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h1><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>进入github,创建一个名字为<code>username.github.com</code>存储库(username为你的用户名)</p><h2 id="配置ssh-key"><a href="#配置ssh-key" class="headerlink" title="配置ssh key"></a>配置ssh key</h2><p>打开 Git Bash，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户主目录 <code>C:\Users\username\.ssh</code>。然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。其中 <code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png"></p><p><code>Title</code> 为标题，任意填即可，将刚刚复制的 <code>id_rsa.pub</code> 内容粘贴进去，最后点击 <code>Add SSH key</code>。在 <code>Git Bash</code> 中检测 <code>GitHub</code> 公钥设置是否成功，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>验证是否连接成功，若成功，结果如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png"></p><h1 id="使用Hexo-博客框架"><a href="#使用Hexo-博客框架" class="headerlink" title="使用Hexo 博客框架"></a>使用Hexo 博客框架</h1><p>Hexo 官方文档：<a href="https://hexo.io/docs/">https://hexo.io/docs/</a></p><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><h3 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h3><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><h3 id="Hexo-原理"><a href="#Hexo-原理" class="headerlink" title="Hexo 原理"></a>Hexo 原理</h3><p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 <code>GitHub</code>。</p><h2 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h2><h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli <span class="hljs-comment"># 此命令完成对 hexo 的安装</span><br>BASH<br></code></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 <code>D:\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>在新建的博客目录下打开git bash，输入如下命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init<br></code></pre></td></tr></table></figure><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>继续在git bash输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在 <code>Git Bash</code> 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s <span class="hljs-comment"># 开启本地预览</span><br>BASH<br></code></pre></td></tr></table></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑。</p><h3 id="上传到-GitHub"><a href="#上传到-GitHub" class="headerlink" title="上传到 GitHub"></a>上传到 GitHub</h3><h4 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h4><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">masterYAML</span><br></code></pre></td></tr></table></figure><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br>BASH<br></code></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p><h4 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br>BASH<br></code></pre></td></tr></table></figure><p>部署成功后，打开对应的网址 <code>https://www.username.github.io</code>，如果出现了和本地预览一样的效果，那么，表明部署成功。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/26/hello-world/"/>
    <url>/2024/08/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
